minting cip_68_444_minting

enum Redeemer {
    MINT_ASSET
    MINT_REFERENCE_TOKEN {
        asset: ByteArray
    }
}

struct MintConfig {
    fee_address: ByteArray
    fee_schedule: [][]Int
}

struct Utxo {
    hash:ByteArray
    index:Int
}

struct MintAsset {
    name: ByteArray
    utxo: Utxo
    price: Int
    valid_until: Int
}

struct MintSettings {
    payment_address: ByteArray
    valid_contracts: []ByteArray
    assets: []MintAsset
}

struct MintCost {
    payment: Int
    fee: Int
}

const SETTINGS_HANDLE_NAME: string
const HANDLE_POLICY: MintingPolicyHash = MintingPolicyHash::new(#f0ff48bbb7bbe9d59a40f1ce90e9e9d0ff5002ec48f232b49ca0fb9a)
const LBL_444: ByteArray = #001bc280 // (444)
const LBL_222: ByteArray = #000de140 // (222)
const LBL_100: ByteArray = #000643b0 // (100)
const SETTINGS_HANDLE: AssetClass = AssetClass::new(HANDLE_POLICY, LBL_222 + (SETTINGS_HANDLE_NAME.encode_utf8()))
const CONFIG_HANDLE: AssetClass = AssetClass::new(HANDLE_POLICY, LBL_222 + ("mint_config_444".encode_utf8()))

func load_config(ctx: ScriptContext) -> MintConfig {
    config_input: Option[TxInput] = ctx.tx.ref_inputs.find_safe((input: TxInput) -> Bool { 
        input.output.value.get_safe(CONFIG_HANDLE) == 1
    });
    assert(config_input != Option[TxInput]::None, "mint_config_444 reference input missing");
    config = MintConfig::from_data(config_input.unwrap().output.datum.get_inline_data());

    config
}

func load_settings(ctx: ScriptContext) -> (MintSettings, Bool) {
    settings_input_ref: Option[TxInput] = ctx.tx.ref_inputs.find_safe((input: TxInput) -> Bool { 
        input.output.value.get_safe(SETTINGS_HANDLE) == 1
    });
    settings_input_reg: Option[TxInput] = ctx.tx.inputs.find_safe((input: TxInput) -> Bool { 
        input.output.value.get_safe(SETTINGS_HANDLE) == 1
    });
    
    assert(settings_input_ref != Option[TxInput]::None || settings_input_reg != Option[TxInput]::None, "settings_input reference input missing");

    if (settings_input_reg != Option[TxInput]::None) {
        (MintSettings::from_data(settings_input_reg.unwrap().output.datum.get_inline_data()), true)
    }
    else {
        signed: Bool = ctx.tx.signatories.find_safe((pubkey: PubKeyHash) -> {
            settings_input_ref.unwrap().output.address.credential.switch{
                    p: PubKey => p.hash, 
                    else => error("Invalid credential hash")} == pubkey}
            ) != Option[PubKeyHash]::None;
        (MintSettings::from_data(settings_input_ref.unwrap().output.datum.get_inline_data()), signed)
    }
}

func get_mint_fee(payment: Int, config: MintConfig) -> Int {
    rate: []Int = config.fee_schedule.sort((a:[]Int, b:[]Int) -> {a.head >= b.head}).find((key:[]Int) -> {payment >= key.head});
    (payment * rate.get(1)) / 100
}

func get_mint_cost(asset: ByteArray, settings: MintSettings, config: MintConfig) -> MintCost {
    // Validate it is in assets list and starts with LBL_444
    assert(asset.starts_with(LBL_444), "Asset is not a (444) token");
    mint_asset_opt: Option[MintAsset] = settings.assets.find_safe((a: MintAsset) -> {
        a.name == asset
    });
    assert(mint_asset_opt != Option[MintAsset]::None, "Asset not found in policy");
    mint_asset:MintAsset = mint_asset_opt.unwrap();
    fee: Int = get_mint_fee(mint_asset.price, config);
    mint_cost:MintCost = MintCost { mint_asset.price - fee, fee };
    if (mint_asset.valid_until > 0) {
        assert(ctx.tx.time_range.end - ctx.tx.time_range.start <= Duration::HOUR, "Invalid slot range for asset");
        assert(ctx.tx.time_range.contains(mint_asset.valid_until), "This asset minting has expired");
        mint_cost
    }
    else { mint_cost }
}

func is_valid_contract(hash: ValidatorHash, settings: MintSettings) -> Bool {
    assert(settings.valid_contracts.any((cred: ByteArray) -> Bool {
        Credential::new_validator(hash) == Credential::new_validator(ValidatorHash::new(cred))
    }), "Contract not found in valid contracts list");
    
    true
}

func main(redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    (settings: MintSettings, signed_by_owner: Bool) = load_settings(ctx);
    redeemer.switch {
        MINT_ASSET => {
            config: MintConfig = load_config(ctx);
            total: MintCost = ctx.tx.minted.get_policy(ctx.get_current_minting_policy_hash()).fold[MintCost]((costs:MintCost, key: ByteArray, value: Int) -> {
                minted_cost: MintCost = get_mint_cost(key, settings, config);
                MintCost {costs.payment + (minted_cost.payment * value), costs.fee + (minted_cost.fee * value)}
            }, MintCost {0, 0});
            // Total to payment_address contains sum of asset prices
            assert(total.payment > 0 && ctx.tx.outputs.any((output: TxOutput) -> {
                output.address == Address::from_data(settings.payment_address)
                && output.value.contains(Value::lovelace(total.payment))}), "Policy minting payment is unpaid");
            // Total to fee_address contains sum of asset fees
            assert(total.fee > 0 && ctx.tx.outputs.any((output: TxOutput) -> {
                output.address == Address::from_data(config.fee_address)
                && output.value.contains(Value::lovelace(total.payment))}), "Minting fee is unpaid");
            true
        },
        r: MINT_REFERENCE_TOKEN => {
            assert(r.asset.starts_with(LBL_100), "Asset is not a (100) token");
            
            // Validate the assets have unique names
            settings.assets.for_each((asset: MintAsset) -> {
                assert(settings.assets.filter((a: MintAsset) -> { a == asset }).length == 1, "Duplicate asset found: " + asset.name.show())
            });

            // This can only happen once per asset_name
            // It consumes the UTxO in the settings
            // Each of these UTxOs need to be created before this Tx
            utxo: Utxo = settings.assets.filter((a: MintAsset) -> { a.name.slice(4, a.name.length) == r.asset.slice(4, r.asset.length) }).get_singleton().utxo;
            assert(ctx.tx.inputs.find_safe(
                    (input: TxInput) -> {input.output_id == TxOutputId::new(TxId::new(utxo.hash), utxo.index)}
                ) != Option[TxInput]::None, "Required UTxO is missing");
            
            // Only if signed by SETTINGS_HANDLE owner
            assert(signed_by_owner, "Missing policy owner signature");

            token_output_opt: Option[TxOutput] = ctx.tx.outputs.find_safe((output: TxOutput) -> {
                output.value.contains(Value::new(AssetClass::new(ctx.get_current_minting_policy_hash(), r.asset), 1))
            });
            
            assert(token_output_opt != Option[TxOutput]::None, "Reference token output missing");
            token_output: TxOutput = token_output_opt.unwrap();
            
            // Assert that it is being sent to a valid contract
            assert(is_valid_contract(token_output.address.credential.switch{
                v: Validator => v.hash, 
                else => error("Invalid contract address")}, settings), "Reference Token not sent to a valid contract");

            // Assert there is only one
            assert(ctx.tx.minted.get_policy(ctx.get_current_minting_policy_hash())
                .get(r.asset) == 1,
                "Only 1 Reference token can be minted with this asset name:" + r.asset.show());
            true
        },
        else => {
            false
        }
    }
}